pipeline {
	agent {
		node {
			label "windows"
		}
	}
	stages {
		stage ('Install NuGet') {
			steps {
				powershell(
					returnStatus:true,
					script:'''
						$PackageProvider = "NuGet";
						If ((Get-PackageProvider -Name "${PackageProvider}" -ErrorAction "SilentlyContinue") -Eq $Null) {
							$ProtoBak=[System.Net.ServicePointManager]::SecurityProtocol;
							[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;
								Install-PackageProvider -Name ("${PackageProvider}") -Force -Confirm:$False; $InstallPackageProvider_ReturnCode = If($?){0}Else{1};  # Install-PackageProvider fails on default windows installs without at least TLS 1.1 as of 20200501T041624
							[System.Net.ServicePointManager]::SecurityProtocol=$ProtoBak;
						}
					'''
				)
			}
		}
		stage ('Install PolicyFileEditor') {
			steps {
				powershell(
					returnStatus:true,
					script:'''
						$PackageProvider = "NuGet";
						If ((Get-PackageProvider -Name "${PackageProvider}" -ErrorAction "SilentlyContinue") -NE $Null) {
							$ProtoBak=[System.Net.ServicePointManager]::SecurityProtocol;
							[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;
								Install-Module -Name ("PolicyFileEditor") -Scope ("CurrentUser") -Force -AllowClobber -SkipPublisherCheck -Confirm:$False -ErrorAction SilentlyContinue;
							[System.Net.ServicePointManager]::SecurityProtocol=$ProtoBak;
						}
					'''
				)
			}
		}
		stage ('Set group policies required to end remote desktop sessions upon being minimized, etc.') {
			steps {
				powershell(
					returnStatus:true,
					script:'''

						$Name="KeepAliveEnable";
						[UInt32]$Value = 0x00000001;
						$HKLM_Path="SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services";  # <-- View exhaustive list of terminal services group policies (and their associated registry keys) https://getadmx.com/HKLM/SOFTWARE/Policies/Microsoft/Windows%20NT/Terminal%20Services
						$Type="DWord";
						Write-Host "";
						Write-Host "Setting [ KeepAliveEnable ] Group Policy - For more information, refer to [ https://getadmx.com/?Category=Windows_7_2008R2&Policy=Microsoft.Policies.TerminalServer::TS_SERVER_COMPRESSOR ]";
						Write-Host -NoNewLine "`n";
						Set-PolicyFileEntry -Path ("${Env:SystemRoot}\\System32\\GroupPolicy\\Machine\\Registry.pol") -Key ("${HKLM_Path}") -ValueName ("${Name}") -Data (${Value}) -Type ("${Type}");

						$Name="KeepAliveInterval";
						[UInt32]$Value = 0x006DDD00; # 0x006DDD00 == 7,200,000
						$HKLM_Path="SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services";  # <-- View exhaustive list of terminal services group policies (and their associated registry keys) https://getadmx.com/HKLM/SOFTWARE/Policies/Microsoft/Windows%20NT/Terminal%20Services
						$Type="DWord";
						Write-Host "";
						Write-Host "Setting [ KeepAliveInterval ] Group Policy - For more information, refer to [ https://getadmx.com/?Category=Windows_7_2008R2&Policy=Microsoft.Policies.TerminalServer::TS_KEEP_ALIVE&Language=sv-se ]";
						Write-Host -NoNewLine "`n";
						Set-PolicyFileEntry -Path ("${Env:SystemRoot}\\System32\\GroupPolicy\\Machine\\Registry.pol") -Key ("${HKLM_Path}") -ValueName ("${Name}") -Data (${Value}) -Type ("${Type}");

						$Name="MaxCompressionLevel";
						[UInt32]$Value = 0x00000002;
						$HKLM_Path="SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services";  # <-- View exhaustive list of terminal services group policies (and their associated registry keys) https://getadmx.com/HKLM/SOFTWARE/Policies/Microsoft/Windows%20NT/Terminal%20Services
						$Type="DWord";
						Write-Host "";
						Write-Host "Setting [ MaxCompressionLevel ] Group Policy - For more information, refer to [ https://getadmx.com/?Category=Windows_10_2016&Policy=Microsoft.Policies.TerminalServer::TS_SERVER_COMPRESSOR ]";
						Write-Host -NoNewLine "`n";
						Set-PolicyFileEntry -Path ("${Env:SystemRoot}\\System32\\GroupPolicy\\Machine\\Registry.pol") -Key ("${HKLM_Path}") -ValueName ("${Name}") -Data (${Value}) -Type ("${Type}");

					'''
				)
			}
		}
	}
}


// ------------------------------------------------------------
//
// Citation(s)
//
//   stackoverflow.com  |  "Executing powershell command directly in jenkins pipeline - Stack Overflow"  |  https://stackoverflow.com/a/42576572
//
//   stackoverflow.com  |  "Using a Jenkins pipeline to checkout multiple git repos into same job - Stack Overflow"  |  https://stackoverflow.com/a/40225216
//
//   www.jfrog.com  |  "Scripted Pipeline Syntax - JFrog - JFrog Documentation"  |  https://www.jfrog.com/confluence/display/JFROG/Scripted+Pipeline+Syntax
//
//   www.jfrog.com  |  "Working With Pipeline Jobs in Jenkins - Artifactory 5.x - JFrog Wiki"  |  https://www.jfrog.com/confluence/display/RTF5X/Working+With+Pipeline+Jobs+in+Jenkins
//
//   www.jenkins.io  |  "Pipeline: Basic Steps"  |  https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/
//
//   www.jenkins.io  |  "Pipeline Examples"  |  https://www.jenkins.io/doc/pipeline/examples/
//
//   www.jenkins.io  |  "Pipeline Syntax"  |  https://www.jenkins.io/doc/book/pipeline/syntax/
//
//   www.jenkins.io  |  "Using a Jenkinsfile"  |  https://www.jenkins.io/doc/book/pipeline/jenkinsfile/
//
// ------------------------------------------------------------