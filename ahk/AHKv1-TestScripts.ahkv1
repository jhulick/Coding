; ------------------------------------------------------------
;
; ahkv1-tester.ahk1, by Cavalol
;   |
;   |--> Test/Debug Hotkeys for Windows-based Workstaitons
;   |
;   |--> Runs via "Autohotkey" (AHK)  >> VERSION 1 << - Download @ https://www.autohotkey.com/download/
;
; ------------------------------------------------------------
;
; Runtime Globals (Settings)
;

#Persistent  ; https://www.autohotkey.com/docs/commands/_Persistent.htm

#HotkeyInterval 2000  ; https://www.autohotkey.com/docs/commands/_HotkeyInterval.htm

#MaxHotkeysPerInterval 2000  ; https://www.autohotkey.com/docs/commands/_MaxHotkeysPerInterval.htm

#SingleInstance Force  ; https://www.autohotkey.com/docs/commands/_SingleInstance.htm

; #EscapeChar \  ; https://www.autohotkey.com/docs/commands/_EscapeChar.htm

; #InstallKeybdHook  ; https://www.autohotkey.com/docs/commands/_InstallKeybdHook.htm

; #UseHook off  ; https://www.autohotkey.com/docs/commands/_UseHook.htm

; SetBatchLines, -1  ; https://www.autohotkey.com/docs/commands/SetBatchLines.htm

SetWorkingDir, %A_ScriptDir%  ; https://www.autohotkey.com/docs/commands/SetWorkingDir.htm

DetectHiddenWindows, On  ; https://www.autohotkey.com/docs/commands/DetectHiddenWindows.htm

SetCapsLockState, Off  ; https://www.autohotkey.com/docs/commands/SetNumScrollCapsLockState.htm

; FileEncoding, UTF-8  ; https://www.autohotkey.com/docs/commands/FileEncoding.htm

; #ErrorStdOut  ; https://www.autohotkey.com/docs/commands/_ErrorStdOut.htm


; ------------------------------------------------------------
;
; Runtime Globals (Variables)
;

; #NoEnv  ; Prevents environment vars from being used (occurs when a var is called/referenced without being instantiated)

; DebugMode := 1
DebugMode := 0


;
; RFC3339 - Timestamps (Internet date-time standardization-values) (https://tools.ietf.org/html/rfc3339)
;  |-->  Example RFC-3339 timestamp w/ timezone:   "2020-07-25 05:46:03-05:00"
;
RFC3339_YearMonthDay_Separator := "-"  ; Character-separator between [ year, month, and day date-field values ]
RFC3339_HourMinuteSecond_Separator := ":"  ; Character-separator between [ hour, minute, and second time-field ] values
RFC3339_DecimalSeconds_Separator := "."  ; Character-separator between [ seconds and fractions-of-a-second (microsecond/millisecond) values ]
RFC3339_DateAndTimeField_Separator := "T"  ; Character-separator between [ date- and time-fields ]
RFC3339_UTC_ZeroHourReplacement := "Z"  ; Replacement-string to use for timezone when the UTC timezone (UTC+00:00) is output


; ------------------------------------------------------------
;
; Setup targeting [ Windows Explorer ]-classed windows
;

GroupAdd, Explorer, ahk_class ExploreWClass ; Unused on Vista and later

GroupAdd, Explorer, ahk_class CabinetWClass


; ------------------------------------------------------------
; ------------------------------------------------------------
; ---                     SPINUP-CHECKS                     ---
; ------------------------------------------------------------
; ------------------------------------------------------------

If (DebugMode == 1) {
	Debug_WelcomeText := ""
	Debug_WelcomeText := Debug_WelcomeText "|" "`n"
	Debug_WelcomeText := Debug_WelcomeText "|->    A_AhkVersion:   " A_AhkVersion "`n"
	Debug_WelcomeText := Debug_WelcomeText "|" "`n"
	Debug_WelcomeText := Debug_WelcomeText "|->    A_OSVersion:     " A_OSVersion "`n"
	TrayTip, %A_ScriptName%, %Debug_WelcomeText%  ; Toast Notification
}


; ------------------------------------------------------------
; ------------------------------------------------------------
; ---                   HOTKEY-LISTENERS                   ---
; ------------------------------------------------------------
; ------------------------------------------------------------


; ------------------------------------------------------------
;
;   HOTKEY:  Win + Esc
;   ACTION:  Refresh This Script  ::: Closes then re-opens this script (Allows saved changes to THIS script (file) to be tested/applied on the fly)
;
~#Escape::
	BlockInPut, Off  ;  Stop blocking input (e.g. restore full interaction)
	Reload  ; Reload this script
	Sleep 1000 ; If successful, the reload will close this instance during the Sleep, so the line below will never be reached.
	MsgBox, 4,, The script could not be reloaded. Would you like to open it for editing?
	; IfMsgBox, Yes, Edit
	If (A_MsgBoxResult = "Yes") {
		Edit
	}
	Return


; ------------------------------------------------------------
;
;   HOTKEY:  Win + C
;   ACTION:  Gets input from user and verifies that it is a positive integer, then runs a loop with the the total number of loop-iterations set equal to the positive integer value previously given by user
;
#C::
	; Require integer-typed user input
	IntegerInput := LoopUntil_UserInputs_PositiveInteger()
	MsgBox, % "Final positive integer value (given by user): [" IntegerInput "]"
	Return


; ------------------------------------------------------------
; ------------------------------------------------------------
; ---                       FUNCTIONS                      ---
; ------------------------------------------------------------
; ------------------------------------------------------------


;
; Benchmark
;   |--> Benchmark("Start")  ==>  Stores the datetime (at time of call) into a static, global variable for reference as a benchmark start-time
;   |--> Benchmark("Stop")   ==>  Stores the datetime (at time of call) into a static, global variable for reference as a benchmark stop-time
;   |--> Benchmark("Get")    ==>  Returns the difference between benchmark start and stop times (in string format)
;   |
;   |--> Example Call:
;            Benchmark("Start")
;            Sleep 1250
;            Benchmark("Stop")
;            MsgBox, % "Benchmark Duration:  " Benchmark("Get")
;
Benchmark_StartVal := 0
Benchmark_StopVal := 0
Benchmark(Bench_RunMode) {
	Global Benchmark_StartVal
	Global Benchmark_StopVal
	RetVal := ""
	Switch Bench_RunMode
	{
		Case "Start":
			Benchmark_StartVal := A_TickCount
		Case "Stop":
			Benchmark_StopVal := A_TickCount
		Case "Get":
			Benchmark_StartStopDiff := FormatTickCountDifference(Benchmark_StartVal, Benchmark_StopVal, 1)
			RetVal := Benchmark_StartStopDiff
		Default:
			; Do nothing by-default
	}
	Return %RetVal%
}


;
; ClearTooltip
;   |--> If called with a positive [ %Period% ], wait [ %Period% ] milliseconds, executes [ %Label% ], then repeats (until explicitly cancelled)
;	  |--> If called with a negative [ %Period% ], wait [ %Period% ] milliseconds, executes [ %Label% ], then returns
;
ClearTooltip(Period) {
	SetTimer, RemoveToolTip, -%Period%
	Return
}


;
; ConvertStringToInt
;   |--> Attempt to convert a string-typed variable to an integer
;
ConvertStringToInt(StringVar) {
	IntVar := ("0" . StringVar) , IntVar += 0
	Return %IntVar%
}


;
; DoLogging
;   |--> Log given text to target file
;
DoLogging(LogOutput, FunctionName:="", LineNumber:=0) {
	TextPrepend := ""
	If (FunctionName != "") {
		TextPrepend := "Function [" FunctionName "]"
	}
	If (LineNumber != 0) {
		Formatted_LineNumber := Format("{:02}", LineNumber)
		TextPrepend := "Line [" Formatted_LineNumber "]"
	}
	If (TextPrepend != "") {
		TextPrepend := "[" TextPrepend "]"
	}
	LogOutputNewline := LogOutput "`n"
	; FormatTime,TIMESTAMP,,yyyyMMddTHHmmss
	Filepath_Logfile := A_Desktop "\logging-" A_ScriptName ".txt"
	FileAppend, %LogOutputNewline%, %Filepath_Logfile%
	Return
}


;
; FormatTickCountDifference
;   |--> Formats the datetime between a start date and an end date (obtained via "StartTime := A_TickCount" &
;
FormatTickCountDifference(StartTime, EndTime, Show_MS := 0) {
	Returnval := ""
	ElapsedTime_MS := EndTime - StartTime
	FormattedHours := SubStr(0 Floor(ElapsedTime_MS / 3600000), -1)
	FormattedMinutes := SubStr(0 Floor((ElapsedTime_MS - FormattedHours * 3600000) / 60000), -1)
	FormattedSeconds := SubStr(0 Floor((ElapsedTime_MS - FormattedHours * 3600000 - FormattedMinutes * 60000) / 1000), -1)
	FormattedMilliseconds := SubStr(0 ElapsedTime_MS - FormattedHours * 3600000 - FormattedMinutes * 60000 - FormattedSeconds * 1000, -2)
	If (Show_MS == 0) {
		Returnval := FormattedHours "h " FormattedMinutes "m " FormattedSeconds "s"
	} Else {
		Returnval := FormattedHours "h " FormattedMinutes "m " FormattedSeconds "." FormattedMilliseconds "s "
	}
	Return Returnval
}


;
; GetInput_PositiveInteger
;   |--> Gets input from user and verifies that it is a positive integer, then runs a loop with the the total number of loop-iterations set equal to the positive integer value previously given by user
;
GetInput_PositiveInteger(ErrorDisplayType:="TrayTip") {
	InputBox, UserInput, % "Enter a positive integer", % "Loop how many times? (Enter a positive integer)",,350,125
	Input_CancelledOutOf := ErrorLevel
	; Convert String to Int
	ErrorText := ""
	UserInput_ToNumber := ConvertStringToInt(UserInput)
	If (Input_CancelledOutOf != 0) {
		; ERROR:  User cancelled/declined to enter a value into input-field
		ErrorText := "!! Error !! - User cancelled out of a required input window"
		; Set the return-value to be blank (to denote errors on-return)
		UserInput_ToNumber := ""
	} Else If ((!(UserInput_ToNumber is integer)) || (UserInput_ToNumber==0)) {
		; ERROR:  Non-integer input by user
		ErrorText := "!! Error !! - Invalid input value:  [" UserInput "]" "`n`n" "Input must be a positive integer"
		; Set the return-value to be blank (to denote errors on-return)
		UserInput_ToNumber := ""
	} Else {
		; If the user followed instructions and input a value matching the requested type, then there's no more work to do here
	}
	If (ErrorText != "") {
		; Error message exists
		Switch (ErrorDisplayType) {
			Case "TrayTip":
				TrayTip, %A_ScriptName%, %ErrorText%  ; Toast Notification
			Case "Msgbox":
				Msgbox, % ErrorText  ; Popup Message
			Case "Tooltip":
				ToolTip, % ErrorText  ; Tooltip next to cursor
			Default:
				; Do nothing by-default (do not show error-message)
		}
	}
	Return %UserInput_ToNumber%
}


;
;	GetPID
;   |--> Returns PID if process IS found
;   |--> Returns 0 if process is NOT found
;
GetPID(ProcName)
{
	Process, Exist, %ProcName%
	Return %ErrorLevel%
}


;
;	LoopUntil_UserInputs_PositiveInteger
;   |--> Perform a while loop which keeps running until either the user gives an input which matches this function-call's requested type, or until this script is killed
;
LoopUntil_UserInputs_PositiveInteger() {
	; Require integer-typed user input
	IntegerInput := ""
	While (IntegerInput == "") {
		IntegerInput := GetInput_PositiveInteger()
	}
	Return IntegerInput
}


;
; RemoveToolTip
;   |--> Removes any Tooltips found
;
RemoveToolTip() {
	ToolTip
	Return
}


; ------------------------------------------------------------
;
; Citation(s)
;
;   autohotkey.com  |  "Converting string to number - Ask for Help - AutoHotkey Community"  |  https://autohotkey.com/board/topic/21271-converting-string-to-number/
;
; ------------------------------------------------------------